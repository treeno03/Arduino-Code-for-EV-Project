// Adapted from: https://randomnerdtutorials.com/rf-433mhz-transmitter-receiver-module-with-arduino/
// Author: Rui Santos
// Description: This Arduino code uses the RH_ASK library for RF communication via ASK modulation.
// Modified accept transmitted message and use the message to control motors.

#include <RH_ASK.h>
#include <SPI.h> 

RH_ASK rf_driver;

const int motor1Pin1 = 2;  // Digital pin for motor 1, input 1
const int motor1Pin2 = 3; // Digital pin for motor 1, input 2
const int enA = 6;          // Enable pin for motor 1
const int motor2Pin1 = 4; // Digital pin for motor 2, input 1
const int motor2Pin2 = 5; // Digital pin for motor 2, input 2
const int enB = 7;          // Enable pin for motor 2

void setup() {
  // Initialize motor pins as outputs
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enB, OUTPUT);
  
  rf_driver.init();
  Serial.begin(9600);
}

void loop() {
    uint8_t buf[10];
    uint8_t buflen = sizeof(buf);
    static char currentCommand[10] = "stop"; // Initially set to stop
    
    // Clear buffer before receiving a new message
    memset(buf, 0, buflen);
    
    if (rf_driver.recv(buf, &buflen)) {
        // Message received with valid checksum
        Serial.print("Command: ");
        Serial.println((char*)buf);
        
        // Update the current command
        strncpy(currentCommand, (char*)buf, sizeof(currentCommand) - 1);
        currentCommand[sizeof(currentCommand) - 1] = '\0';
    }
    
    // Execute the current command
    if (strcmp(currentCommand, "forward") == 0) {
        moveForward();
    } else if (strcmp(currentCommand, "backward") == 0) {
        moveBackward();
    } else if (strcmp(currentCommand, "right") == 0) {
        turnRight();
    } else if (strcmp(currentCommand, "left") == 0) {
        turnLeft();
    } else {
        stopMotors(); // Stop if command is not recognized
    }
    
    // Add a small delay to prevent excessive looping
    delay(100);
}

void moveForward() {
    // Motor 1
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    analogWrite(enA, 255);  // Adjust speed as needed

    // Motor 2
    digitalWrite(motor2Pin1, HIGH);
    digitalWrite(motor2Pin2, LOW);
    analogWrite(enB, 255);  // Adjust speed as needed
}

void moveBackward() {
    // Motor 1
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    analogWrite(enA, 255);  // Adjust speed as needed

    // Motor 2
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, HIGH);
    analogWrite(enB, 255);  // Adjust speed as needed
}

void turnRight() {
    // Motor 1
    digitalWrite(motor1Pin1, HIGH);
    digitalWrite(motor1Pin2, LOW);
    analogWrite(enA, 150);  // Adjust speed as needed

    // Motor 2
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, HIGH);
    analogWrite(enB, 150);  // Adjust speed as needed
}

void turnLeft() {
    // Motor 1
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, HIGH);
    analogWrite(enA, 150);  // Adjust speed as needed

    // Motor 2
    digitalWrite(motor2Pin1, HIGH);
    digitalWrite(motor2Pin2, LOW);
    analogWrite(enB, 150);  // Adjust speed as needed
}

void stopMotors() {
    // Motor 1
    digitalWrite(motor1Pin1, LOW);
    digitalWrite(motor1Pin2, LOW);
    analogWrite(enA, 0);  // Set speed to 0

    // Motor 2
    digitalWrite(motor2Pin1, LOW);
    digitalWrite(motor2Pin2, LOW);
    analogWrite(enB, 0);  // Set speed to 0
}
